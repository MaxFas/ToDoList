{"version":3,"sources":["serviceWorker.ts","reducers/tasks-reducer.ts","AddItemForm.tsx","EditableSpan.tsx","api/todoList-API.ts","reducers/app-reducer.ts","Task.tsx","TodoList.tsx","reducers/todoList-reducer.ts","ErrorSnackbar.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","value","variant","onChange","event","currentTarget","onKeyPress","e","key","label","helperText","Button","onClick","color","EditableSpan","editMode","setEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","toDoListAPI","get","toDoListID","delete","post","put","taskID","payLoad","initialState","loading","isLoading","type","changeTaskTC","changingProperty","dispatch","getState","task","tasks","find","t","id","taskForServer","description","status","priority","startDate","deadline","then","res","changeTask","data","item","console","warn","Task","removeTask","changeTaskStatus","changeTaskTitle","removeTaskCallBack","useCallback","changeTaskStatusCallBack","newIsDoneValue","checked","Completed","New","changeTaskTitleCallBack","newTitle","className","Checkbox","IconButton","Delete","TodoList","useDispatch","filter","changeFilter","addTask","removeToDoList","isExisting","useEffect","getTasks","items","getTasksTC","addTaskCallBack","setAllFilter","setActiveFilter","setCompletedFilter","removeToDoListCallBack","changeTitleCallBack","tasksForToDoList","disabled","style","listStyle","paddingLeft","map","size","Alert","elevation","ErrorSnackbar","useSelector","state","app","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","toDoLists","todolists","taskId","todoListID","removeTaskTC","resultCode","messages","addTaskTC","newFilterValue","action","changeDoListFilterAC","changeDoListTitleAC","changeToDoListsTitleTC","changeExistStatus","removeToDoListAC","removeToDoListsTC","addToDoList","toDoList","addToDoListsTC","toDoListItems","tl","Grid","Paper","padding","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","container","spacing","rootReducer","combineReducers","copyState","forEach","todoListId","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.082aea9e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nimport {AddToDoListActionType, GetToDoListsActionType, RemoveToDoListActionType} from \"./todoList-reducer\";\r\nimport {\r\n    ChangingPropertyRequestPayLoadChangeTaskType,\r\n    RequestPayLoadChangeTaskType,\r\n    toDoListAPI\r\n} from \"../api/todoList-API\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {isLoading, setError} from \"./app-reducer\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TasksFromServerType>\r\n}\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsTypes):TasksStateType  => {\r\n    switch (action.type) {\r\n        case \"GET-TASKS\": {\r\n            return {...state, [action.toDoListID]: action.tasks}\r\n        }\r\n        case \"GET-TODOLISTS\": {\r\n            const copyState = {...state}\r\n            action.toDoLists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"REMOVE-TASK\": {\r\n            let copyState = {...state}\r\n            copyState[action.todoListID] = state[action.todoListID].filter(t => t.id !== action.taskID)\r\n            return copyState\r\n        }\r\n        case \"ADD-TASK\": {\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        }\r\n        case \"CHANGE-TASK\": {\r\n            return {...state, [action.task.todoListId]: state[action.task.todoListId].map(t=> {\r\n                    if (t.id===action.task.id){\r\n                        return {...t, ...action.changingProperty}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })}\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.toDoList.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let copyState = {...state}\r\n            delete copyState[action.toDoListID]\r\n            return {...copyState}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const getTasks = (tasks: TasksFromServerType[], toDoListID: string) => {\r\n    return {type: \"GET-TASKS\", tasks, toDoListID} as const\r\n}\r\nexport const removeTask = (todoListID: string, taskID: string ) => {\r\n    return {type: \"REMOVE-TASK\", taskID, todoListID} as const\r\n}\r\nexport const addTask = (task: TasksFromServerType) => {\r\n    return {type: \"ADD-TASK\", task}  as const\r\n}\r\nexport const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\r\n    return {type: \"CHANGE-STATUS\", taskID, isDone, todoListID}  as const\r\n}\r\nexport const changeTask = (task: TasksFromServerType, changingProperty: ChangingPropertyRequestPayLoadChangeTaskType) => {\r\n    return {type: \"CHANGE-TASK\", task, changingProperty} as const\r\n}\r\n\r\nexport const getTasksTC = (toDoListID: string) => (dispatch: Dispatch) => {\r\n    dispatch(isLoading(true))\r\n    toDoListAPI.getTasks(toDoListID)\r\n        .then(res=> {\r\n            dispatch(getTasks(res.data.items, toDoListID))\r\n            dispatch(isLoading(false))\r\n        })\r\n\r\n}\r\n\r\nexport const addTaskTC = (toDoListID: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(isLoading(true))\r\n    toDoListAPI.addTask(toDoListID, title)\r\n        .then(res => {\r\n            debugger\r\n            if(res.data.resultCode === 0){\r\n                dispatch(addTask(res.data.data.item))\r\n            } else {\r\n               dispatch(setError(res.data.messages[0]))\r\n            }\r\n            dispatch(isLoading(false))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (toDoListID: string, taskID: string) => (dispatch: Dispatch) => {\r\n    dispatch(isLoading(true))\r\n    toDoListAPI.removeTask(toDoListID, taskID)\r\n        .then(res=> {\r\n            dispatch(removeTask(toDoListID, taskID))\r\n            dispatch(isLoading(false))\r\n        })\r\n}\r\n\r\nexport const changeTaskTC = (toDoListID: string, taskID: string, changingProperty:ChangingPropertyRequestPayLoadChangeTaskType) =>\r\n    (dispatch: Dispatch, getState: ()=> AppRootStateType) => {\r\n    dispatch(isLoading(true))\r\n    const state = getState()\r\n    const task = state.tasks[toDoListID].find(t => t.id === taskID)\r\n    if (!task) {\r\n        console.warn('task not found in the state')\r\n        return\r\n    }\r\n    let taskForServer: RequestPayLoadChangeTaskType = {\r\n        title: task.title,\r\n        description: task.description,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline,\r\n        ...changingProperty\r\n    }\r\n    toDoListAPI.changeTask(toDoListID, taskForServer, taskID)\r\n        .then(res=> {\r\n            dispatch(changeTask(res.data.data.item, changingProperty))\r\n            dispatch(isLoading(false))\r\n        })\r\n}\r\n\r\n\r\ntype RemoveTaskActionType = ReturnType<typeof removeTask>\r\ntype AddTaskActionType = ReturnType<typeof addTask>\r\ntype ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatus>\r\ntype ChangeTaskTitleActionType = ReturnType<typeof changeTask>\r\ntype GetTasksActionType = ReturnType<typeof getTasks>\r\n\r\nexport type TasksFromServerType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\n\r\ntype ActionsTypes = RemoveTaskActionType|AddTaskActionType|ChangeTaskStatusActionType|\r\n    ChangeTaskTitleActionType|AddToDoListActionType|RemoveToDoListActionType|GetToDoListsActionType\r\n|GetTasksActionType\r\n","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField value={title} variant={\"outlined\"}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressAddItem}\r\n                       label={'Task name'}\r\n                       error={error}\r\n                       helperText={error && 'Title is required'}/>\r\n            <Button variant={\"contained\"} onClick={addItem} color={\"primary\"}>+</Button>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanType = {\r\n    title: string\r\n    changeTitle: (newTask: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)}\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const onEnter = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter'){\r\n            setEditMode(false)\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        editMode? <TextField variant={\"outlined\"} value={title} onKeyPress={onEnter} onChange={onChangeHandler} onBlur={offEditMode} autoFocus={true}/>:\r\n        <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})\r\n\r\nexport default EditableSpan","import axios from \"axios\";\r\nimport {TasksFromServerType, TaskStatuses} from \"../reducers/tasks-reducer\";\r\nimport {ToDoListsFromServerType} from \"../reducers/todoList-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b9ca9bb3-c4d5-4d4a-a9b8-46e44fce672e'\r\n    }\r\n})\r\n\r\n\r\nexport const toDoListAPI = {\r\n    getToDoList () {\r\n      return instance.get('/todo-lists')\r\n    },\r\n    removeTodoList (toDoListID: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${toDoListID}`)\r\n    },\r\n    addToDoList (title: string) {\r\n        return instance.post<ResponseType<{item: ToDoListsFromServerType}>>('/todo-lists/', {title})\r\n    },\r\n    changeToDoListTitle (toDoListID: string, title: string) {\r\n        return instance.put<ResponseType>(`/todo-lists/${toDoListID}`, {title})\r\n    },\r\n    getTasks(toDoListID: string) {\r\n        return instance.get(`/todo-lists/${toDoListID}/tasks`)\r\n    },\r\n    removeTask (toDoListID: string, taskID: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${toDoListID}/tasks/${taskID}`)\r\n    },\r\n    addTask (toDoListID: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TasksFromServerType }>>(`/todo-lists/${toDoListID}/tasks`, {title})\r\n    },\r\n    changeTask (toDoListID: string, payLoad: RequestPayLoadChangeTaskType, taskID: string) {\r\n        return instance.put(`/todo-lists/${toDoListID}/tasks/${taskID}`, payLoad)\r\n    },\r\n}\r\n\r\nexport type RequestPayLoadChangeTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type ChangingPropertyRequestPayLoadChangeTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type ResponseType<T={}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data:T\r\n}","\r\nconst initialState = {\r\n    loading: false,\r\n    error: null as null| string,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/IS-LOADING':\r\n            return {...state, loading: action.loading}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const isLoading = (loading: boolean) => ({type: 'APP/IS-LOADING', loading}) as const\r\nexport const setError = (error: null|string) => ({type: 'APP/SET-ERROR', error}) as const\r\n\r\n\r\n\r\n\r\ntype ActionsType = isLoadingType|setErrorType\r\ntype isLoadingType = ReturnType<typeof isLoading>\r\ntype setErrorType = ReturnType<typeof setError>","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TasksFromServerType, TaskStatuses} from \"./reducers/tasks-reducer\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TasksFromServerType\r\n    removeTask: (taskID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string) => void\r\n}\r\n\r\nexport const Task:React.FC<TaskPropsType> = React.memo((props) => {\r\n\r\n    const {task,\r\n        removeTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle,} = props\r\n\r\n    const removeTaskCallBack = useCallback(() => removeTask(task.id), [task.id, removeTask])\r\n    const changeTaskStatusCallBack = useCallback((e:ChangeEvent<HTMLInputElement>)=> {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [task.id, changeTaskStatus])\r\n    const changeTaskTitleCallBack = useCallback((newTitle: string)=>\r\n        props.changeTaskTitle(task.id, newTitle), [task.id, changeTaskTitle])\r\n\r\n    return (\r\n        <li key={props.task.id} className={props.task.status === TaskStatuses.Completed? 'is-done': ''}>\r\n            <Checkbox color={\"primary\"} checked={props.task.status === TaskStatuses.Completed}\r\n                      onChange={changeTaskStatusCallBack}/>\r\n            <EditableSpan title={props.task.title} changeTitle={changeTaskTitleCallBack}/>\r\n            <IconButton onClick={removeTaskCallBack}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./AppWithRedux\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./Task\";\r\nimport {getTasksTC, TasksFromServerType, TasksStateType, TaskStatuses} from \"./reducers/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype TodoListPropsType = {\r\n    toDoListID: string\r\n    filter: FilterValuesType\r\n    title: string\r\n    tasks: Array<TasksFromServerType>\r\n    isExisting: boolean\r\n    removeTask: (taskId: string, toDoListID: string) => void\r\n    changeFilter: (newFilterValue: FilterValuesType, toDoListID: string) => void\r\n    addTask: (title: string, toDoListID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, toDoListID: string) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, toDoListID: string) => void\r\n    changeTitle: (newTitle: string, toDoListID: string) => void\r\n}\r\n\r\nconst TodoList: React.FC<TodoListPropsType> = React.memo((props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {\r\n        toDoListID,\r\n        filter,\r\n        title,\r\n        tasks,\r\n        removeTask,\r\n        changeFilter,\r\n        addTask,\r\n        changeTaskStatus,\r\n        removeToDoList,\r\n        changeTaskTitle,\r\n        changeTitle,\r\n        isExisting\r\n    } = props\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(toDoListID))\r\n    }, [])\r\n\r\n    const addTaskCallBack = useCallback((title: string) => addTask(title, toDoListID), [addTask, toDoListID])\r\n    const setAllFilter = useCallback(() => changeFilter(\"all\", toDoListID), [toDoListID])\r\n    const setActiveFilter = useCallback(() => changeFilter(\"active\", toDoListID), [toDoListID])\r\n    const setCompletedFilter = useCallback(() => changeFilter(\"completed\", toDoListID), [toDoListID])\r\n    const removeToDoListCallBack = useCallback(() => removeToDoList(toDoListID), [])\r\n    const changeTitleCallBack = useCallback((newTitle: string) => changeTitle(newTitle, toDoListID), [changeTitle, toDoListID])\r\n\r\n    let tasksForToDoList = tasks\r\n    if (filter === 'active') {\r\n        tasksForToDoList = tasksForToDoList.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForToDoList = tasksForToDoList.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const removeTaskCallBack = (taskID: string) => removeTask(taskID, toDoListID)\r\n    const changeTaskStatusCallBack = (taskID: string, status: TaskStatuses) =>\r\n        changeTaskStatus(taskID, status, toDoListID)\r\n    const changeTaskTitleCallBack = (taskID: string, newTitle: string) =>\r\n        changeTaskTitle(taskID, newTitle, props.toDoListID)\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={title} changeTitle={changeTitleCallBack}/>\r\n                <IconButton onClick={removeToDoListCallBack} disabled={!isExisting}>\r\n                    <Delete/>\r\n                </IconButton></h3>\r\n            <AddItemForm addItem={addTaskCallBack}/>\r\n            <ul style={{listStyle: \"none\", paddingLeft: '0'}}>\r\n                {tasksForToDoList.map(t => <Task key={t.id} removeTask={removeTaskCallBack} task={t}\r\n                                                 changeTaskStatus={changeTaskStatusCallBack}\r\n                                                 changeTaskTitle={changeTaskTitleCallBack}/>)}\r\n            </ul>\r\n            <div>\r\n                <Button onClick={setAllFilter} variant={\"contained\"}\r\n                        color={filter === 'all' ? 'secondary' : 'primary'} size={\"small\"}>All</Button>\r\n                <Button onClick={setActiveFilter} variant={\"contained\"}\r\n                        color={filter === 'active' ? 'secondary' : 'primary'} size={\"small\"}>Active</Button>\r\n                <Button onClick={setCompletedFilter} variant={\"contained\"}\r\n                        color={filter === 'completed' ? 'secondary' : 'primary'} size={\"small\"}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default TodoList;","import {FilterValuesType} from \"../AppWithRedux\";\r\nimport {toDoListAPI} from \"../api/todoList-API\";\r\nimport {Dispatch} from \"redux\";\r\nimport {isLoading, setError} from \"./app-reducer\";\r\n\r\n\r\nlet initialState: Array<ToDoListType> = []\r\n\r\nexport const toDoListReducer = (state = initialState, action: ActionType): Array<ToDoListType> => {\r\n    switch (action.type) {\r\n        case \"GET-TODOLISTS\":\r\n            return action.toDoLists.map(tl => ({...tl, filter: 'all', isExisting: true}))\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.toDoListID)\r\n        case \"ADD-TODOLIST\":\r\n            return [...state, {...action.toDoList, filter: 'all', isExisting: true}]\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            return state.map(tl => tl.id === action.toDoListID? {...tl, title: action.newTitle}: tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            const toDoList = state.find(tl => tl.id === action.toDoListID)\r\n            if (toDoList) {\r\n                toDoList.filter = action.newFilterValue\r\n                return [...state]\r\n            }\r\n            return state\r\n        }\r\n        case \"CHANGE-EXIST-STATUS\": {\r\n            const toDoList = state.find(tl => tl.id === action.toDoListID)\r\n            if (toDoList) {\r\n                toDoList.isExisting = action.isExisting\r\n                return [...state]\r\n            }\r\n            return state\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeToDoListAC = (toDoListID: string) => {\r\n    return {type: \"REMOVE-TODOLIST\", toDoListID} as const\r\n}\r\nexport const addToDoListAC = (toDoList: ToDoListsFromServerType) => {\r\n    return {type: \"ADD-TODOLIST\", toDoList} as const\r\n}\r\nexport const changeDoListFilterAC = (newFilterValue: FilterValuesType, toDoListID: string) => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", newFilterValue, toDoListID} as const\r\n}\r\nexport const changeDoListTitleAC = (toDoListID: string, title: string) => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", toDoListID, newTitle: title} as const\r\n}\r\nexport const getToDoLists = (toDoLists: Array<ToDoListsFromServerType>) => {\r\n    return {type: \"GET-TODOLISTS\", toDoLists} as const\r\n}\r\nexport const changeExistStatus = (isExisting: false, toDoListID: string) => {\r\n    return {type: \"CHANGE-EXIST-STATUS\", isExisting, toDoListID} as const\r\n}\r\n\r\n\r\nexport type RemoveToDoListActionType = ReturnType<typeof removeToDoListAC>\r\nexport type AddToDoListActionType = ReturnType<typeof addToDoListAC>\r\nexport type ChangeDoListFilterActionType = ReturnType<typeof changeDoListFilterAC>\r\nexport type ChangeDoListTitleActionType = ReturnType<typeof changeDoListTitleAC>\r\nexport type GetToDoListsActionType = ReturnType<typeof getToDoLists>\r\nexport type ChangeExistStatusType = ReturnType<typeof changeExistStatus>\r\n\r\nexport const getToDoListsTC = () => (dispatch: Dispatch) => {\r\n    toDoListAPI.getToDoList()\r\n        .then(res => dispatch(getToDoLists(res.data)))\r\n}\r\n\r\nexport const addToDoListsTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(isLoading(true))\r\n    toDoListAPI.addToDoList(title)\r\n        .then(res => {\r\n            debugger\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addToDoListAC(res.data.data.item))\r\n            } else {\r\n                dispatch(setError(res.data.messages[0]))\r\n            }\r\n            dispatch(isLoading(false))\r\n        })\r\n}\r\nexport const removeToDoListsTC = (toDoListID: string) => (dispatch: Dispatch) => {\r\n    dispatch(isLoading(true))\r\n    dispatch(changeExistStatus(false, toDoListID))\r\n    toDoListAPI.removeTodoList(toDoListID)\r\n        .then(res => {\r\n            dispatch(removeToDoListAC(toDoListID))\r\n            dispatch(isLoading(false))\r\n        })\r\n}\r\n\r\nexport const changeToDoListsTitleTC = (toDoListID: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(isLoading(true))\r\n    toDoListAPI.changeToDoListTitle(toDoListID, title)\r\n        .then(res => {\r\n            dispatch(changeDoListTitleAC(toDoListID, title))\r\n            dispatch(isLoading(false))\r\n        })\r\n}\r\n\r\nexport type ToDoListsFromServerType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ToDoListType = ToDoListsFromServerType & { filter: FilterValuesType, isExisting: boolean }\r\n\r\ntype ActionType =\r\n    RemoveToDoListActionType\r\n    | AddToDoListActionType\r\n    | ChangeDoListFilterActionType\r\n    | ChangeDoListTitleActionType\r\n    | GetToDoListsActionType\r\n    | ChangeExistStatusType\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {setError} from \"./reducers/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string|null>((state)=> state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setError(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addToDoListsTC,\r\n    changeDoListFilterAC,\r\n    changeToDoListsTitleTC, getToDoListsTC,\r\n    removeToDoListsTC, ToDoListType,\r\n} from \"./reducers/todoList-reducer\";\r\nimport {\r\n    addTaskTC,\r\n    changeTaskTC,\r\n    removeTaskTC, TasksStateType, TaskStatuses\r\n} from \"./reducers/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {ErrorSnackbar} from \"./ErrorSnackbar\";\r\n\r\nexport type TaskType = {\r\n    title: string\r\n    id: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nfunction AppWithRedux() {\r\n\r\n\r\n    useEffect(()=>{\r\n        dispatch(getToDoListsTC())\r\n    }, [])\r\n\r\n    let toDoLists = useSelector<AppRootStateType, ToDoListType[]>(state => state.todolists)\r\n    let isLoading = useSelector<AppRootStateType, boolean>(state => state.app.loading)\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    let dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((taskId: string, toDoListID: string)=> {\r\n        dispatch(removeTaskTC(toDoListID, taskId))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, toDoListID: string) => {\r\n        dispatch(addTaskTC(toDoListID, title))\r\n    }, [dispatch])\r\n    const changeTaskStatus =useCallback((taskID: string, status: TaskStatuses, toDoListID: string)=> {\r\n        dispatch(changeTaskTC(toDoListID, taskID, {status}))\r\n    }, [dispatch])\r\n    const changeTaskTitle =useCallback((taskID: string, newTitle: string, toDoListID: string)=> {\r\n        dispatch(changeTaskTC(toDoListID, taskID, {title: newTitle}))\r\n    }, [dispatch])\r\n    const changeFilter =useCallback((newFilterValue: FilterValuesType, toDoListID: string)=> {\r\n        let action = changeDoListFilterAC(newFilterValue, toDoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTitle =useCallback((newTitle: string, toDoListID: string)=> {\r\n        dispatch(changeToDoListsTitleTC(toDoListID, newTitle))\r\n    }, [dispatch])\r\n    const removeToDoList =useCallback((toDoListID: string)=> {\r\n        dispatch(removeToDoListsTC(toDoListID))\r\n    }, [dispatch])\r\n    const addToDoList = useCallback((title: string) => {\r\n        dispatch(addToDoListsTC(title))\r\n    }, [dispatch])\r\n\r\n    const toDoListItems = toDoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={5} style={{padding: '20px'}}>\r\n                    <TodoList removeToDoList={removeToDoList} toDoListID={tl.id} addTask={addTask} title={tl.title}\r\n                              tasks={tasks[tl.id]} removeTask={removeTask} isExisting={tl.isExisting}\r\n                              changeFilter={changeFilter} changeTaskStatus={changeTaskStatus} filter={tl.filter}\r\n                              changeTitle={changeTitle} changeTaskTitle={changeTaskTitle}/>\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <ErrorSnackbar />\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {isLoading&&<LinearProgress color=\"secondary\"/>}\r\n            <Container fixed style={{padding: '20px'}}>\r\n                <Grid container><AddItemForm addItem={addToDoList}/> </Grid>\r\n                <Grid container spacing={4}>{toDoListItems}</Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from '../reducers/tasks-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {toDoListReducer} from \"../reducers/todoList-reducer\";\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from \"../reducers/app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: toDoListReducer,\r\n    app: appReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(<Provider store={store}><AppWithRedux /></Provider> ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}