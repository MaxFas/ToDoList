{"version":3,"sources":["serviceWorker.ts","api/todoList-API.ts","reducers/auth-reducer.ts","reducers/app-reducer.ts","components/ErrorSnackbar.tsx","reducers/tasks-reducer.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","components/TodoList.tsx","reducers/todoList-reducer.ts","components/ToDoListList.tsx","components/Login.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","instance","axios","create","baseURL","withCredentials","headers","toDoListAPI","get","toDoListID","delete","title","post","put","taskID","payLoad","authAPI","personalData","initialState","isLoggedIn","setIsLoggedInAC","value","type","loading","error","isInitialized","isLoading","setError","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","dispatch","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","AddItemForm","React","memo","useState","setTitle","addItem","trimmedTitle","trim","TextField","onChange","currentTarget","onKeyPress","e","key","label","helperText","Button","onClick","color","EditableSpan","editMode","setEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","changeTaskTC","changingProperty","getState","task","tasks","find","t","id","taskForServer","description","status","priority","startDate","deadline","then","res","changeTask","data","item","console","warn","Task","removeTask","changeTaskStatus","changeTaskTitle","removeTaskCallBack","useCallback","changeTaskStatusCallBack","newIsDoneValue","checked","Completed","New","changeTaskTitleCallBack","newTitle","className","Checkbox","IconButton","Delete","TodoList","filter","changeFilter","addTask","removeToDoList","isExisting","useEffect","getTasks","items","getTasksTC","addTaskCallBack","setAllFilter","setActiveFilter","setCompletedFilter","removeToDoListCallBack","changeTitleCallBack","tasksForToDoList","disabled","style","listStyle","paddingLeft","map","size","ToDoListList","auth","toDoLists","todolists","taskId","todoListID","removeTaskTC","resultCode","messages","addTaskTC","newFilterValue","action","changeDoListFilterAC","changeDoListTitleAC","changeToDoListsTitleTC","changeExistStatus","removeToDoListAC","removeToDoListsTC","addToDoList","toDoList","addToDoListsTC","toDoListItems","tl","Grid","Paper","padding","Container","fixed","container","spacing","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","resetForm","justify","xs","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","AppWithRedux","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","exact","path","render","textAlign","fontSize","from","top","width","CircularProgress","rootReducer","combineReducers","copyState","forEach","todoListId","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dd4b429d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport {TasksFromServerType, TaskStatuses} from \"../reducers/tasks-reducer\";\r\nimport {ToDoListsFromServerType} from \"../reducers/todoList-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b9ca9bb3-c4d5-4d4a-a9b8-46e44fce672e'\r\n    }\r\n})\r\n\r\n\r\nexport const toDoListAPI = {\r\n    getToDoList () {\r\n      return instance.get('/todo-lists')\r\n    },\r\n    removeTodoList (toDoListID: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${toDoListID}`)\r\n    },\r\n    addToDoList (title: string) {\r\n        return instance.post<ResponseType<{item: ToDoListsFromServerType}>>('/todo-lists/', {title})\r\n    },\r\n    changeToDoListTitle (toDoListID: string, title: string) {\r\n        return instance.put<ResponseType>(`/todo-lists/${toDoListID}`, {title})\r\n    },\r\n    getTasks(toDoListID: string) {\r\n        return instance.get(`/todo-lists/${toDoListID}/tasks`)\r\n    },\r\n    removeTask (toDoListID: string, taskID: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${toDoListID}/tasks/${taskID}`)\r\n    },\r\n    addTask (toDoListID: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TasksFromServerType }>>(`/todo-lists/${toDoListID}/tasks`, {title})\r\n    },\r\n    changeTask (toDoListID: string, payLoad: RequestPayLoadChangeTaskType, taskID: string) {\r\n        return instance.put(`/todo-lists/${toDoListID}/tasks/${taskID}`, payLoad)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(personalData: LoginRequestType) {\r\n        return instance.post<ResponseType<{userID: number}>>(`/auth/login`, personalData)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`/auth/login`)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeType>>(`/auth/me`)\r\n    }\r\n}\r\n\r\n\r\nexport type AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginRequestType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type RequestPayLoadChangeTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type ChangingPropertyRequestPayLoadChangeTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type ResponseType<T={}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data:T\r\n}","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginRequestType} from \"../api/todoList-API\";\r\nimport {AppActionsType, isLoading, setError} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\nexport const loginTC = (data: LoginRequestType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(isLoading(true))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                dispatch(setError(res.data.messages[0]))\r\n            }\r\n        })\r\n    dispatch(isLoading(false))\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    debugger\r\n    dispatch(isLoading(true))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n            } else {\r\n                dispatch(setError(res.data.messages[0]))\r\n            }\r\n        })\r\n    dispatch(isLoading(false))\r\n}\r\n\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | AppActionsType","import {authAPI} from \"../api/todoList-API\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoggedInAC} from \"./auth-reducer\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    error: null as null| string,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/IS-LOADING':\r\n            return {...state, loading: action.loading}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n            case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const isLoading = (loading: boolean) => ({type: 'APP/IS-LOADING', loading}) as const\r\nexport const setError = (error: null|string) => ({type: 'APP/SET-ERROR', error}) as const\r\nexport const setInitialized = (isInitialized: boolean) => ({type: 'APP/SET-INITIALIZED', isInitialized}) as const\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        }\r\n    })\r\n        .finally(()=> {\r\n            dispatch(setInitialized(true))\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\nexport type AppActionsType = isLoadingType|setErrorType|setInitializedType\r\ntype isLoadingType = ReturnType<typeof isLoading>\r\ntype setErrorType = ReturnType<typeof setError>\r\ntype setInitializedType = ReturnType<typeof setInitialized>","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {setError} from \"../reducers/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string|null>((state)=> state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setError(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","\r\nimport {AddToDoListActionType, GetToDoListsActionType, RemoveToDoListActionType} from \"./todoList-reducer\";\r\nimport {\r\n    ChangingPropertyRequestPayLoadChangeTaskType,\r\n    RequestPayLoadChangeTaskType,\r\n    toDoListAPI\r\n} from \"../api/todoList-API\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {isLoading, setError} from \"./app-reducer\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TasksFromServerType>\r\n}\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsTypes):TasksStateType  => {\r\n    switch (action.type) {\r\n        case \"GET-TASKS\": {\r\n            return {...state, [action.toDoListID]: action.tasks}\r\n        }\r\n        case \"GET-TODOLISTS\": {\r\n            const copyState = {...state}\r\n            action.toDoLists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"REMOVE-TASK\": {\r\n            let copyState = {...state}\r\n            copyState[action.todoListID] = state[action.todoListID].filter(t => t.id !== action.taskID)\r\n            return copyState\r\n        }\r\n        case \"ADD-TASK\": {\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        }\r\n        case \"CHANGE-TASK\": {\r\n            return {...state, [action.task.todoListId]: state[action.task.todoListId].map(t=> {\r\n                    if (t.id===action.task.id){\r\n                        return {...t, ...action.changingProperty}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })}\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.toDoList.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let copyState = {...state}\r\n            delete copyState[action.toDoListID]\r\n            return {...copyState}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const getTasks = (tasks: TasksFromServerType[], toDoListID: string) => {\r\n    return {type: \"GET-TASKS\", tasks, toDoListID} as const\r\n}\r\nexport const removeTask = (todoListID: string, taskID: string ) => {\r\n    return {type: \"REMOVE-TASK\", taskID, todoListID} as const\r\n}\r\nexport const addTask = (task: TasksFromServerType) => {\r\n    return {type: \"ADD-TASK\", task}  as const\r\n}\r\nexport const changeTaskStatus = (taskID: string, isDone: boolean, todoListID: string) => {\r\n    return {type: \"CHANGE-STATUS\", taskID, isDone, todoListID}  as const\r\n}\r\nexport const changeTask = (task: TasksFromServerType, changingProperty: ChangingPropertyRequestPayLoadChangeTaskType) => {\r\n    return {type: \"CHANGE-TASK\", task, changingProperty} as const\r\n}\r\n\r\nexport const getTasksTC = (toDoListID: string) => (dispatch: Dispatch) => {\r\n    dispatch(isLoading(true))\r\n    toDoListAPI.getTasks(toDoListID)\r\n        .then(res=> {\r\n            dispatch(getTasks(res.data.items, toDoListID))\r\n            dispatch(isLoading(false))\r\n        })\r\n\r\n}\r\n\r\nexport const addTaskTC = (toDoListID: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(isLoading(true))\r\n    toDoListAPI.addTask(toDoListID, title)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(addTask(res.data.data.item))\r\n            } else {\r\n               dispatch(setError(res.data.messages[0]))\r\n            }\r\n            dispatch(isLoading(false))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (toDoListID: string, taskID: string) => (dispatch: Dispatch) => {\r\n    dispatch(isLoading(true))\r\n    toDoListAPI.removeTask(toDoListID, taskID)\r\n        .then(res=> {\r\n            dispatch(removeTask(toDoListID, taskID))\r\n            dispatch(isLoading(false))\r\n        })\r\n}\r\n\r\nexport const changeTaskTC = (toDoListID: string, taskID: string, changingProperty:ChangingPropertyRequestPayLoadChangeTaskType) =>\r\n    (dispatch: Dispatch, getState: ()=> AppRootStateType) => {\r\n    dispatch(isLoading(true))\r\n    const state = getState()\r\n    const task = state.tasks[toDoListID].find(t => t.id === taskID)\r\n    if (!task) {\r\n        console.warn('task not found in the state')\r\n        return\r\n    }\r\n    let taskForServer: RequestPayLoadChangeTaskType = {\r\n        title: task.title,\r\n        description: task.description,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline,\r\n        ...changingProperty\r\n    }\r\n    toDoListAPI.changeTask(toDoListID, taskForServer, taskID)\r\n        .then(res=> {\r\n            dispatch(changeTask(res.data.data.item, changingProperty))\r\n            dispatch(isLoading(false))\r\n        })\r\n}\r\n\r\n\r\ntype RemoveTaskActionType = ReturnType<typeof removeTask>\r\ntype AddTaskActionType = ReturnType<typeof addTask>\r\ntype ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatus>\r\ntype ChangeTaskTitleActionType = ReturnType<typeof changeTask>\r\ntype GetTasksActionType = ReturnType<typeof getTasks>\r\n\r\nexport type TasksFromServerType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\n\r\ntype ActionsTypes = RemoveTaskActionType|AddTaskActionType|ChangeTaskStatusActionType|\r\n    ChangeTaskTitleActionType|AddToDoListActionType|RemoveToDoListActionType|GetToDoListsActionType\r\n|GetTasksActionType\r\n","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField value={title} variant={\"outlined\"}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressAddItem}\r\n                       label={'Task name'}\r\n                       error={error}\r\n                       helperText={error && 'Title is required'}/>\r\n            <Button variant={\"contained\"} onClick={addItem} color={\"primary\"}>+</Button>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanType = {\r\n    title: string\r\n    changeTitle: (newTask: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)}\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const onEnter = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter'){\r\n            setEditMode(false)\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        editMode? <TextField variant={\"outlined\"} value={title} onKeyPress={onEnter} onChange={onChangeHandler} onBlur={offEditMode} autoFocus={true}/>:\r\n        <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})\r\n\r\nexport default EditableSpan","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TasksFromServerType, TaskStatuses} from \"../reducers/tasks-reducer\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TasksFromServerType\r\n    removeTask: (taskID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string) => void\r\n}\r\n\r\nexport const Task:React.FC<TaskPropsType> = React.memo((props) => {\r\n\r\n    const {task,\r\n        removeTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle,} = props\r\n\r\n    const removeTaskCallBack = useCallback(() => removeTask(task.id), [task.id, removeTask])\r\n    const changeTaskStatusCallBack = useCallback((e:ChangeEvent<HTMLInputElement>)=> {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [task.id, changeTaskStatus])\r\n    const changeTaskTitleCallBack = useCallback((newTitle: string)=>\r\n        changeTaskTitle(task.id, newTitle), [task.id, changeTaskTitle])\r\n\r\n    return (\r\n        <li key={props.task.id} className={props.task.status === TaskStatuses.Completed? 'is-done': ''}>\r\n            <Checkbox color={\"primary\"} checked={props.task.status === TaskStatuses.Completed}\r\n                      onChange={changeTaskStatusCallBack}/>\r\n            <EditableSpan title={props.task.title} changeTitle={changeTaskTitleCallBack}/>\r\n            <IconButton onClick={removeTaskCallBack}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {FilterValuesType} from \"../AppWithRedux\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./Task\";\r\nimport {getTasksTC, TasksFromServerType, TaskStatuses} from \"../reducers/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype TodoListPropsType = {\r\n    toDoListID: string\r\n    filter: FilterValuesType\r\n    title: string\r\n    tasks: Array<TasksFromServerType>\r\n    isExisting: boolean\r\n    removeTask: (taskId: string, toDoListID: string) => void\r\n    changeFilter: (newFilterValue: FilterValuesType, toDoListID: string) => void\r\n    addTask: (title: string, toDoListID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, toDoListID: string) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, toDoListID: string) => void\r\n    changeTitle: (newTitle: string, toDoListID: string) => void\r\n}\r\n\r\nconst TodoList: React.FC<TodoListPropsType> = React.memo((props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {\r\n        toDoListID,\r\n        filter,\r\n        title,\r\n        tasks,\r\n        removeTask,\r\n        changeFilter,\r\n        addTask,\r\n        changeTaskStatus,\r\n        removeToDoList,\r\n        changeTaskTitle,\r\n        changeTitle,\r\n        isExisting\r\n    } = props\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(toDoListID))\r\n    }, [])\r\n\r\n    const addTaskCallBack = useCallback((title: string) => addTask(title, toDoListID), [addTask, toDoListID])\r\n    const setAllFilter = useCallback(() => changeFilter(\"all\", toDoListID), [toDoListID])\r\n    const setActiveFilter = useCallback(() => changeFilter(\"active\", toDoListID), [toDoListID])\r\n    const setCompletedFilter = useCallback(() => changeFilter(\"completed\", toDoListID), [toDoListID])\r\n    const removeToDoListCallBack = useCallback(() => removeToDoList(toDoListID), [])\r\n    const changeTitleCallBack = useCallback((newTitle: string) => changeTitle(newTitle, toDoListID), [changeTitle, toDoListID])\r\n\r\n    let tasksForToDoList = tasks\r\n    if (filter === 'active') {\r\n        tasksForToDoList = tasksForToDoList.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForToDoList = tasksForToDoList.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const removeTaskCallBack = (taskID: string) => removeTask(taskID, toDoListID)\r\n    const changeTaskStatusCallBack = (taskID: string, status: TaskStatuses) =>\r\n        changeTaskStatus(taskID, status, toDoListID)\r\n    const changeTaskTitleCallBack = (taskID: string, newTitle: string) =>\r\n        changeTaskTitle(taskID, newTitle, props.toDoListID)\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={title} changeTitle={changeTitleCallBack}/>\r\n                <IconButton onClick={removeToDoListCallBack} disabled={!isExisting}>\r\n                    <Delete/>\r\n                </IconButton></h3>\r\n            <AddItemForm addItem={addTaskCallBack}/>\r\n            <ul style={{listStyle: \"none\", paddingLeft: '0'}}>\r\n                {tasksForToDoList.map(t => <Task key={t.id} removeTask={removeTaskCallBack} task={t}\r\n                                                 changeTaskStatus={changeTaskStatusCallBack}\r\n                                                 changeTaskTitle={changeTaskTitleCallBack}/>)}\r\n            </ul>\r\n            <div>\r\n                <Button onClick={setAllFilter} variant={\"contained\"}\r\n                        color={filter === 'all' ? 'secondary' : 'primary'} size={\"small\"}>All</Button>\r\n                <Button onClick={setActiveFilter} variant={\"contained\"}\r\n                        color={filter === 'active' ? 'secondary' : 'primary'} size={\"small\"}>Active</Button>\r\n                <Button onClick={setCompletedFilter} variant={\"contained\"}\r\n                        color={filter === 'completed' ? 'secondary' : 'primary'} size={\"small\"}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default TodoList;","import {FilterValuesType} from \"../AppWithRedux\";\r\nimport {toDoListAPI} from \"../api/todoList-API\";\r\nimport {Dispatch} from \"redux\";\r\nimport {isLoading, setError} from \"./app-reducer\";\r\n\r\n\r\nlet initialState: Array<ToDoListType> = []\r\n\r\nexport const toDoListReducer = (state = initialState, action: ActionType): Array<ToDoListType> => {\r\n    switch (action.type) {\r\n        case \"GET-TODOLISTS\":\r\n            return action.toDoLists.map(tl => ({...tl, filter: 'all', isExisting: true}))\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.toDoListID)\r\n        case \"ADD-TODOLIST\":\r\n            return [...state, {...action.toDoList, filter: 'all', isExisting: true}]\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            return state.map(tl => tl.id === action.toDoListID? {...tl, title: action.newTitle}: tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            const toDoList = state.find(tl => tl.id === action.toDoListID)\r\n            if (toDoList) {\r\n                toDoList.filter = action.newFilterValue\r\n                return [...state]\r\n            }\r\n            return state\r\n        }\r\n        case \"CHANGE-EXIST-STATUS\": {\r\n            const toDoList = state.find(tl => tl.id === action.toDoListID)\r\n            if (toDoList) {\r\n                toDoList.isExisting = action.isExisting\r\n                return [...state]\r\n            }\r\n            return state\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeToDoListAC = (toDoListID: string) => {\r\n    return {type: \"REMOVE-TODOLIST\", toDoListID} as const\r\n}\r\nexport const addToDoListAC = (toDoList: ToDoListsFromServerType) => {\r\n    return {type: \"ADD-TODOLIST\", toDoList} as const\r\n}\r\nexport const changeDoListFilterAC = (newFilterValue: FilterValuesType, toDoListID: string) => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", newFilterValue, toDoListID} as const\r\n}\r\nexport const changeDoListTitleAC = (toDoListID: string, title: string) => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", toDoListID, newTitle: title} as const\r\n}\r\nexport const getToDoLists = (toDoLists: Array<ToDoListsFromServerType>) => {\r\n    return {type: \"GET-TODOLISTS\", toDoLists} as const\r\n}\r\nexport const changeExistStatus = (isExisting: false, toDoListID: string) => {\r\n    return {type: \"CHANGE-EXIST-STATUS\", isExisting, toDoListID} as const\r\n}\r\n\r\n\r\nexport type RemoveToDoListActionType = ReturnType<typeof removeToDoListAC>\r\nexport type AddToDoListActionType = ReturnType<typeof addToDoListAC>\r\nexport type ChangeDoListFilterActionType = ReturnType<typeof changeDoListFilterAC>\r\nexport type ChangeDoListTitleActionType = ReturnType<typeof changeDoListTitleAC>\r\nexport type GetToDoListsActionType = ReturnType<typeof getToDoLists>\r\nexport type ChangeExistStatusType = ReturnType<typeof changeExistStatus>\r\n\r\nexport const getToDoListsTC = () => (dispatch: Dispatch) => {\r\n    toDoListAPI.getToDoList()\r\n        .then(res => dispatch(getToDoLists(res.data)))\r\n}\r\n\r\nexport const addToDoListsTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(isLoading(true))\r\n    toDoListAPI.addToDoList(title)\r\n        .then(res => {\r\n            debugger\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addToDoListAC(res.data.data.item))\r\n            } else {\r\n                dispatch(setError(res.data.messages[0]))\r\n            }\r\n            dispatch(isLoading(false))\r\n        })\r\n}\r\nexport const removeToDoListsTC = (toDoListID: string) => (dispatch: Dispatch) => {\r\n    dispatch(isLoading(true))\r\n    dispatch(changeExistStatus(false, toDoListID))\r\n    toDoListAPI.removeTodoList(toDoListID)\r\n        .then(res => {\r\n            dispatch(removeToDoListAC(toDoListID))\r\n            dispatch(isLoading(false))\r\n        })\r\n}\r\n\r\nexport const changeToDoListsTitleTC = (toDoListID: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(isLoading(true))\r\n    toDoListAPI.changeToDoListTitle(toDoListID, title)\r\n        .then(res => {\r\n            dispatch(changeDoListTitleAC(toDoListID, title))\r\n            dispatch(isLoading(false))\r\n        })\r\n}\r\n\r\nexport type ToDoListsFromServerType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ToDoListType = ToDoListsFromServerType & { filter: FilterValuesType, isExisting: boolean }\r\n\r\ntype ActionType =\r\n    RemoveToDoListActionType\r\n    | AddToDoListActionType\r\n    | ChangeDoListFilterActionType\r\n    | ChangeDoListTitleActionType\r\n    | GetToDoListsActionType\r\n    | ChangeExistStatusType\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport TodoList from \"./../components/TodoList\";\r\nimport AddItemForm from \"./../components/AddItemForm\";\r\nimport {\r\n    Container,\r\n    Grid,\r\n    Paper,\r\n} from \"@material-ui/core\";\r\nimport {\r\n    addToDoListsTC,\r\n    changeDoListFilterAC,\r\n    changeToDoListsTitleTC, getToDoListsTC,\r\n    removeToDoListsTC, ToDoListType,\r\n} from \"../reducers/todoList-reducer\";\r\nimport {\r\n    addTaskTC,\r\n    changeTaskTC,\r\n    removeTaskTC, TasksStateType, TaskStatuses\r\n} from \"../reducers/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport function ToDoListList() {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state)=> state.auth.isLoggedIn)\r\n\r\n    useEffect(()=>{\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(getToDoListsTC())\r\n    }, [])\r\n\r\n    const toDoLists = useSelector<AppRootStateType, ToDoListType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((taskId: string, toDoListID: string)=> {\r\n        dispatch(removeTaskTC(toDoListID, taskId))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, toDoListID: string) => {\r\n        dispatch(addTaskTC(toDoListID, title))\r\n    }, [dispatch])\r\n    const changeTaskStatus =useCallback((taskID: string, status: TaskStatuses, toDoListID: string)=> {\r\n        dispatch(changeTaskTC(toDoListID, taskID, {status}))\r\n    }, [dispatch])\r\n    const changeTaskTitle =useCallback((taskID: string, newTitle: string, toDoListID: string)=> {\r\n        dispatch(changeTaskTC(toDoListID, taskID, {title: newTitle}))\r\n    }, [dispatch])\r\n    const changeFilter =useCallback((newFilterValue: FilterValuesType, toDoListID: string)=> {\r\n        let action = changeDoListFilterAC(newFilterValue, toDoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const changeTitle =useCallback((newTitle: string, toDoListID: string)=> {\r\n        dispatch(changeToDoListsTitleTC(toDoListID, newTitle))\r\n    }, [dispatch])\r\n    const removeToDoList =useCallback((toDoListID: string)=> {\r\n        dispatch(removeToDoListsTC(toDoListID))\r\n    }, [dispatch])\r\n    const addToDoList = useCallback((title: string) => {\r\n        dispatch(addToDoListsTC(title))\r\n    }, [dispatch])\r\n\r\n    const toDoListItems = toDoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={5} style={{padding: '20px'}}>\r\n                    <TodoList removeToDoList={removeToDoList} toDoListID={tl.id} addTask={addTask} title={tl.title}\r\n                              tasks={tasks[tl.id]} removeTask={removeTask} isExisting={tl.isExisting}\r\n                              changeFilter={changeFilter} changeTaskStatus={changeTaskStatus} filter={tl.filter}\r\n                              changeTitle={changeTitle} changeTaskTitle={changeTaskTitle}/>\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n            <Container fixed style={{padding: '20px'}}>\r\n                <Grid container><AddItemForm addItem={addToDoList}/> </Grid>\r\n                <Grid container spacing={4}>{toDoListItems}</Grid>\r\n            </Container>\r\n    );\r\n}\r\n\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport {loginTC} from \"../reducers/auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state)=> state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length <= 2){\r\n                errors.password = \"Must be 3 characters or less\";\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: fastsovmax@yandex.ru</p>\r\n                    <p>Password: testacc</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email && <div style={{color:'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password && <div style={{color:'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                checked={formik.values.rememberMe}\r\n                                {...formik.getFieldProps('email')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackbar\";\r\nimport {ToDoListList} from \"./components/ToDoListList\";\r\nimport {Login} from \"./components/Login\";\r\nimport {Route, Switch, Redirect} from \"react-router-dom\";\r\nimport {initializeAppTC} from \"./reducers/app-reducer\";\r\nimport {logoutTC} from \"./reducers/auth-reducer\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.app.loading)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state)=> state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    useEffect( ()=> {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <ErrorSnackbar />\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn &&<Button onClick={logoutHandler} color=\"inherit\">Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {isLoading&&<LinearProgress color=\"secondary\"/>}\r\n            <Switch>\r\n                <Route exact path={'/'} render={()=> <ToDoListList />}/>\r\n                <Route path={'/ToDoList'} render={()=> <ToDoListList />}/>\r\n                <Route path={'/login'} render={()=> <Login/>}/>\r\n                <Route path={'/404'} render={()=> <h1 style={{textAlign: 'center', fontSize:'80px'}}> 404: PAGE IS NOT FOUND</h1>}/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from '../reducers/tasks-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {toDoListReducer} from \"../reducers/todoList-reducer\";\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from \"../reducers/app-reducer\";\r\nimport {authReducer} from \"../reducers/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: toDoListReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <AppWithRedux/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}